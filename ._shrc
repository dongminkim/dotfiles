# ._shrc
# common rc file for both bash and zsh
# vim:filetype=zsh:foldmethod=marker

# Functions {{{
    # Color Settings for Manual Pages
        function set_less_256colors { #{{{
            export LESS_TERMCAP_mb=$'\E[01;31m'             # begin blinking
            export LESS_TERMCAP_md=$'\E[01;38;5;160m'       # begin bold
            export LESS_TERMCAP_me=$'\E[0m'                 # end mode
            export LESS_TERMCAP_us=$'\E[01;38;5;166m'       # begin underline
            export LESS_TERMCAP_ue=$'\E[0m'                 # end underline
            export LESS_TERMCAP_so=$'\E[01;04;38;5;162m'    # begin standout (info-bar, search)
            export LESS_TERMCAP_se=$'\E[0m'                 # end standout (info-bar, search)
        } #}}}
        function set_less_16colors { #{{{
            export LESS_TERMCAP_mb=$'\E[01;31m'     # begin blinking
            export LESS_TERMCAP_md=$'\E[31m'        # begin bold
            export LESS_TERMCAP_me=$'\E[0m'         # end mode
            export LESS_TERMCAP_us=$'\E[04;33m'     # begin underline
            export LESS_TERMCAP_ue=$'\E[0m'         # end underline
            export LESS_TERMCAP_so=$'\E[46m'        # begin standout (info-bar, search)
            export LESS_TERMCAP_se=$'\E[0m'         # end standout (info-bar, search)
        } #}}}
        export LESS="-Ri"

    # Command Existenace Checker
        function check-runnable { #{{{
            case "$( detect_shell )" in
                bash ) [ "$( type -t $1 )" = "" ] && return 1 || return 0 ;;
                zsh  ) type "$1" > /dev/null ;;
            esac
        } #}}}

    # Screen Command Overrider
        function screen { #{{{
            local screencmd
            screencmd=( "$(/usr/bin/env which screen)" )
            if [[ "$TERM" =~ -256color(-.*)? ]]; then
                screencmd=( "${screencmd[@]}" -T screen-256color )
            fi
            local screenrc="$HOME/.host.$(uname -n).screenrc"
            if [ -f "$screenrc" ]; then
                screencmd=( "${screencmd[@]}" -c "$screenrc" )
            fi
            "${screencmd[@]}"
        } #}}}

    # Tmux Launcher
        function tmx { #{{{
            local OPTIND opt_dup
            while getopts ":dh" opt; do
                case $opt in
                    d ) opt_dup=1 ;;
                    h ) echo "Usage: $0 [-h][-d] [SESSION_NAME]"
                        echo "Options:"
                        echo "  -h  Print this help"
                        echo "  -d  Duplicate SESSION_NAME(default '0') tmux session"
                        return 0 ;;
                esac
            done
            shift $(($OPTIND - 1))

            local ses_name="${1:-0}"
            if [ "$ses_name" = "ls" ]; then
                tmux ls
            elif tmux ls 2> /dev/null | grep "^$ses_name:"; then
                if [ "$opt_dup" ]; then
                    local dup_seq=$( tmux ls | egrep "^vv~\d+:" | cut -f1 -d: | cut -f2 -d~ | sort -n | awk '$1!=p+1{print p+1;exit}{p=$1}' )
                    local dup_ses_name="${ses_name}~${dup_seq:-1}"
                    tmux new-session -t "$ses_name" -s "$dup_ses_name"
                else
                    tmux attach-session -d -t "$ses_name"
                fi
            else
                if [ "$opt_dup" ]; then
                    echo "No such tmux session '$ses_name'" 1>&2
                    return 1
                else
                    if check-runnable "tmx-$ses_name"; then
                        "tmx-$ses_name" "$ses_name"
                    else
                        tmux new-session -s "$ses_name"
                    fi
                fi
            fi
        } #}}}

    # Git Command Overrider
        function git { #{{{
            local gitcmd="git-$1"
            if check-runnable "$gitcmd"; then
                shift
                "$gitcmd" "$@"
            else
                "$(/usr/bin/env which git)" "$@"
            fi
        } #}}}
        function git-log { #{{{
            # https://git-scm.com/docs/pretty-formats
            "$(/usr/bin/env which git)" log \
                --pretty=format:'%C(red)%h%C(reset) -%C(magenta)%d%C(reset) %C(bold)%s%C(reset) %C(green)(%cr; %ci)%C(reset) - %C(blue)%an %C(cyan)<%ae>%C(reset)' \
                --abbrev-commit "$@"
        } #}}}
        function git-lg { #{{{
            local _logLineToHash="grep -o '[a-f0-9]\{7\}' | head -1"
            local _showCommit="xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"
            local _viewLogLine="echo {} | $_logLineToHash | $_showCommit"
            local _out _key _hash
            IFS=$'\n' _out=$(
                git-log --graph --color=always "$@" \
                    | fzf --no-sort --reverse --tiebreak=index --no-multi --ansi --preview $_viewLogLine \
                        --exit-0 --expect=ctrl-o,ctrl-y
            )
            _key=$( head -1 <<< "$_out" )
            _hash=$( head -2 <<< "$_out" | tail -1 | eval "$_logLineToHash" )
            if [ -n "$_hash" ]; then
                case "$_key" in
                    ctrl-o ) echo $_hash | eval "$_showCommit" | less ;;
                    ctrl-y ) check-runnable pbcopy && echo -n $_hash | pbcopy ;;
                esac
                echo $_hash
            fi
        } #}}}
        function git-df { #{{{
            git diff --color=always "$@" | diff-so-fancy
        } #}}}

    # Path Compactor
        function compact_path { #{{{
            echo "$*" \
                | tr ':' '\n' | awk '!seen[$0]++' | tr '\n' ':' \
                | sed -e 's/:$//'
        } #}}}
        function sort_path { #{{{
            local user_path="$HOME/local/bin:$HOME/bin"
            local system_path="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"
            compact_path "$user_path:$*:$system_path"
        } #}}}

    # More RC Files
        function load_more_rc_files { #{{{
            local placeholder="{{}}"
            local more_rc_files
            more_rc_files=(
                "$HOME/.os.$(uname -s)$placeholder"
                "$HOME/.host.$(uname -n)$placeholder"
                "$HOME/.local$placeholder"
            )

            for rc_tpl in "${more_rc_files[@]}"; do
                for target in "$@"; do
                    local target=$( basename "$target" )
                    local rc="${rc_tpl//$placeholder/$target}"
                    if [ -f "$rc" ]; then
                        source "$rc"
                    fi
                done
            done
        } #}}}

    # Shell Detector
        function detect_shell { #{{{
            case "$( ps -p $$ -ocomm= )" in
                *bash ) echo bash; return 0 ;;
                *zsh  ) echo zsh;  return 0 ;;
            esac
            return 1
        } #}}}
# Functions }}}

# General Settings {{{
    umask 022
    ulimit -c 0

    # set path {{{
        export PATH=$( sort_path "$PATH" )
        if whereis manpath > /dev/null 2>&1 ; then
            export MANPATH=$( compact_path "$HOME/local/share/man:$(manpath)" )
        else
            export MANPATH=$( compact_path "$HOME/local/share/man:$MANPATH" )
        fi > /dev/null 2>&1
    #}}}

    # set terminal type {{{
        if [[ "$COLORTERM" == "gnome-terminal" ]]; then
            if [[ "$TERM" == "xterm" ]]; then
                export TERM="xterm-256color"
            fi
        fi
    #}}}

    # set colors: man {{{
        if [[ "$TERM" =~ -256color(-.*)? ]]; then
            set_less_256colors
        else
            set_less_16colors
        fi
    #}}}

    # locale UTF-8 {{{
        export LANG=$( LC_CTYPE=C locale -a | grep -i 'en_US\.utf-*8' )
        export LC_CTYPE="$LANG"

        # workaround for problems in ls, sort and etc.
        export LC_COLLATE=C
    #}}}

    # default programs {{{
        export VISUAL=vim
        export EDITOR=$VISUAL
    #}}}

    # command aliases {{{
        alias rm='rm -i'
        alias mv='mv -i'
        alias cp='cp -i'
        alias grep='grep --color=auto'
        alias fgrep='fgrep --color=auto'
        alias vi='vim'
        alias ag='ag --page "less -Ri"'
    # }}}
# General Settings }}}

# OS Specific Settings {{{
    os="$(uname -s)"
    case "$os" in
        Darwin | FreeBSD )
            # http://geoff.greer.fm/lscolors/
            export LSCOLORS="exfxcxdxbxaGagaBabacaf"
            alias list='ls -al'
            alias ls='ls -vGp --quoting-style=shell-escape --color=auto'
            ;;

        Linux | CYGWIN*  )
            # http://geoff.greer.fm/lscolors/
            export LSCOLORS="di=34;40:ln=35;40:so=32;40:pi=33;40:ex=31;40:bd=0;1;46:cd=0;46:su=0;1;41:sg=0;41:tw=0;42:ow=0;45:"
            alias list='ls -al --show --color=auto'
            alias ls='ls -N --show --color=auto'
            ;;
    esac

    if [[ "$os" == "Darwin" ]]; then
        # brew-cask
        export HOMEBREW_CASK_OPTS='--appdir=/Applications --caskroom=/etc/Caskroom'
    fi
# OS Specific Settings }}}

# Shell Specific Settings {{{
    PY_PKG_DIR="$( find /usr/local/lib/python2.7 -iname '*-packages' )"
    case "$( detect_shell )" in
        bash )
            export _SH_SOURCE="$BASH_SOURCE"
            set -o ignoreeof    # ignore EOF (Ctrl+D)
            POWERLINE_SCRIPT="${PY_PKG_DIR}/powerline/bindings/bash/powerline.sh"
            FZF_SCRIPT="$HOME/.fzf.bash"
            ;;

        zsh  )
            export _SH_SOURCE="${(%):-%N}"
            setopt IGNORE_EOF   # ignore EOF (Ctrl+D)
            POWERLINE_SCRIPT="${PY_PKG_DIR}/powerline/bindings/zsh/powerline.zsh"
            FZF_SCRIPT="$HOME/.fzf.zsh"
            ;;
    esac
    [ -f "${POWERLINE_SCRIPT}" ] && source "${POWERLINE_SCRIPT}"
    [ -f "${FZF_SCRIPT}" ] && source "${FZF_SCRIPT}"
    export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'
    if check-runnable "fasd"; then
        eval "$( fasd --init auto )"
        unalias z zz sd sf
        function z() {
            local dir
            dir="$( fasd -Rdl "$1" | fzf -1 -0 --no-sort +m )" && cd "${dir}" || return 1
        }
    fi
# Shell Specific Settings }}}

# Additonal Settings {{{
    load_more_rc_files "$( basename $_SH_SOURCE )" "$@"
# Additonal Settings }}}

