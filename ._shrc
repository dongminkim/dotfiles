# ._shrc
# common rc file for both bash and zsh
# vim:filetype=zsh:foldmethod=marker

# Functions {{{
    # Color Settings for Manual Pages
        function set-less-256colors { #{{{
            export LESS_TERMCAP_mb=$'\E[01;31m'             # begin blinking
            export LESS_TERMCAP_md=$'\E[01;38;5;160m'       # begin bold
            export LESS_TERMCAP_me=$'\E[0m'                 # end mode
            export LESS_TERMCAP_us=$'\E[01;38;5;166m'       # begin underline
            export LESS_TERMCAP_ue=$'\E[0m'                 # end underline
            export LESS_TERMCAP_so=$'\E[01;04;38;5;162m'    # begin standout (info-bar, search)
            export LESS_TERMCAP_se=$'\E[0m'                 # end standout (info-bar, search)
        } #}}}
        function set-less-16colors { #{{{
            export LESS_TERMCAP_mb=$'\E[01;31m'     # begin blinking
            export LESS_TERMCAP_md=$'\E[31m'        # begin bold
            export LESS_TERMCAP_me=$'\E[0m'         # end mode
            export LESS_TERMCAP_us=$'\E[04;33m'     # begin underline
            export LESS_TERMCAP_ue=$'\E[0m'         # end underline
            export LESS_TERMCAP_so=$'\E[46m'        # begin standout (info-bar, search)
            export LESS_TERMCAP_se=$'\E[0m'         # end standout (info-bar, search)
        } #}}}
        export LESS="-Ri"

    # Command Existenace Checker
        function check-runnable { #{{{
            case "$( detect-shell )" in
                bash ) [ "$( type -t $1 )" = "" ] && return 1 || return 0 ;;
                zsh  ) type "$1" > /dev/null ;;
            esac
        } #}}}

    # Screen Command Overrider
        function screen { #{{{
            local screencmd
            screencmd=( "$(/usr/bin/env which screen)" )
            if [[ "$TERM" =~ -256color(-.*)? ]]; then
                screencmd=( "${screencmd[@]}" -T screen-256color )
            fi
            local screenrc="$HOME/.host.$(uname -n).screenrc"
            if [ -f "$screenrc" ]; then
                screencmd=( "${screencmd[@]}" -c "$screenrc" )
            fi
            "${screencmd[@]}"
        } #}}}

    # Tmux Launcher
        function tmx { #{{{
            local OPTIND tmx_opt
            while getopts ":hadl" opt; do
                case $opt in
                    a ) tmx_opt=ATTACH ;;
                    d ) tmx_opt=DUPLICATE ;;
                    l ) tmx_opt=LIST ;;
                    h ) echo "Usage: $0 [-h][-a][-d][-l] [SESSION_NAME]"
                        echo "   If SESSION_NAME is 'ls', just list sessions"
                        echo "   If SESSION_NAME exists, attach to it with detaching the old ttys"
                        echo "   Otherwise, create new tmux session with SESSION_NAME(default '0')"
                        echo
                        echo "Options:"
                        echo "  -h  Print this help"
                        echo "  -a  Attach to SESSION_NAME without detaching the old ttys"
                        echo "  -d  Duplicate SESSION_NAME"
                        echo "  -l  List sessions"
                        return 0 ;;
                esac
            done
            shift $(($OPTIND - 1))

            local ses_name="${1:-0}"
            if [ "$tmx_opt" = LIST ] || [ "$ses_name" = "ls" ]; then
                tmux ls
            elif tmux ls 2> /dev/null | grep "^$ses_name:"; then
                if [ "$tmx_opt" = DUPLICATE ]; then
                    local dup_seq=$( tmux ls | egrep "^vv~\d+:" | cut -f1 -d: | cut -f2 -d~ | sort -n | awk '$1!=p+1{print p+1;exit}{p=$1}' )
                    local dup_ses_name="${ses_name}~${dup_seq:-1}"
                    tmux new-session -t "$ses_name" -s "$dup_ses_name"
                elif [ "$tmx_opt" = ATTACH ]; then
                    tmux attach-session -t "$ses_name"
                else
                    tmux attach-session -d -t "$ses_name"
                fi
            else
                if [ ! -z "$tmx_opt" ]; then
                    echo "No such tmux session '$ses_name'" 1>&2
                    return 1
                else
                    if check-runnable "tmx-$ses_name"; then
                        "tmx-$ses_name" "$ses_name"
                    else
                        tmux new-session -s "$ses_name"
                    fi
                fi
            fi
        } #}}}

    # Git Command Overrider
        function git { #{{{
            local gitcmd="git-$1"
            if check-runnable "$gitcmd"; then
                shift
                "$gitcmd" "$@"
            else
                "$(/usr/bin/env which git)" "$@"
            fi
        } #}}}
        function git-log { #{{{
            # https://git-scm.com/docs/pretty-formats
            "$(/usr/bin/env which git)" log \
                --pretty=format:'%C(red)%h%C(reset) -%C(magenta)%d%C(reset) %C(bold)%s%C(reset) %C(green)(%cr; %ci)%C(reset) - %C(blue)%an %C(cyan)<%ae>%C(reset)' \
                --abbrev-commit "$@"
        } #}}}
        function git-lg { #{{{
            local _logLineToHash="grep -o '[a-f0-9]\{7\}' | head -1"
            local _diffModifier="cat"
            if check-runnable "diff-so-fancy"; then
                _diffModifier="diff-so-fancy"
            fi
            local _showCommit="xargs -I % sh -c 'git show --color=always % | $_diffModifier'"
            local _viewLogLine="echo {} | $_logLineToHash | $_showCommit"
            local _out _key _hash
            IFS=$'\n' _out=$(
                git-log --graph --color=always "$@" \
                    | fzf --no-sort --reverse --tiebreak=index --no-multi --ansi --preview $_viewLogLine \
                        --exit-0 --expect=ctrl-o,ctrl-y
            )
            _key=$( head -1 <<< "$_out" )
            _hash=$( head -2 <<< "$_out" | tail -1 | eval "$_logLineToHash" )
            if [ -n "$_hash" ]; then
                case "$_key" in
                    ctrl-o ) echo $_hash | eval "$_showCommit" | less ;;
                    ctrl-y ) check-runnable "pbcopy" && echo -n $_hash | pbcopy ;;
                esac
                echo $_hash
            fi
        } #}}}
        function git-df { #{{{
            if check-runnable "diff-so-fancy"; then
                git diff --color=always "$@" | diff-so-fancy | less
            else
                git diff "$@"
            fi
        } #}}}

    # Path Compactor
        function unique-path { #{{{
            echo "$*" \
                | tr ':' '\n' | awk '!seen[$0]++' | tr '\n' ':' \
                | sed -e 's/:$//'
        } #}}}
        function sort-path { #{{{
            local user_path="$HOME/local/bin:$HOME/bin"
            local system_path="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"
            unique-path "$user_path:$*:$system_path"
        } #}}}

    # More RC Files
        function load-more-rc-files { #{{{
            local placeholder="{{}}"
            local more_rc_files
            more_rc_files=(
                "$HOME/.os.$(uname -s)$placeholder"
                "$HOME/.host.$(uname -n)$placeholder"
                "$HOME/.local$placeholder"
            )

            for rc_tpl in "${more_rc_files[@]}"; do
                for target in "$@"; do
                    local target=$( basename "$target" )
                    local rc="${rc_tpl//$placeholder/$target}"
                    if [ -f "$rc" ]; then
                        source "$rc"
                    fi
                done
            done
        } #}}}

    # Shell Detector
        function detect-shell { #{{{
            case "$( ps -p $$ -ocomm= )" in
                *bash ) echo bash; return 0 ;;
                *zsh  ) echo zsh;  return 0 ;;
            esac
            return 1
        } #}}}

    # Lazy Loading
        function lazy-load { #{{{
            # modified from https://gist.github.com/QinMing/364774610afc0e06cc223b467abe83c0
            if [ "$1" = "--run" ]; then
                # $2: lazy loading function/command to be loaded before actual target commands
                # $3: target commands to be unaliased in a string format
                # $4+: the command line to run after lazy-loading
                local -a targets
                if [[ -n "$ZSH_VERSION" ]]; then
                    targets=("${(@s: :)${3}}")
                else
                    targets=($3)
                fi
                unalias "${targets[@]}"
                "$2"
                shift 3
                "$@"
            else
                # $1: lazy loading function/command to be loaded before actual target commands
                # $2+: target commands
                local lazy="$1"
                shift 1
                for cmd in "$@"; do
                    alias $cmd="lazy-load --run $lazy '$*' $cmd"
                done
            fi
        } #}}}

    # EvalCache
        function eval-cache { #{{{
            local cache_dir="$HOME/.eval-cache/$( detect-shell )"
            if [ "$1" = "--clear" ]; then
                rm -Rf "$cache_dir"
                return
            fi
            local sha1sum="$( check-runnable shasum && echo shasum || echo sha1sum )"
            local cache_sha1="$( echo "$*" | "$sha1sum" | cut -c 1-40 )"
            local cache_file="$cache_dir/${1##*/}..$cache_sha1.sh"
            if [ "$EVAL_CACHE_DISABLED" = "true" ]; then
                eval "$( "$@" )"
            elif [ -s "$cache_file" ]; then
                source "$cache_file"
            else
                if type "$1" > /dev/null; then
                    echo "eval-cache: init: $*"
                    mkdir -p "$cache_dir"
                    "$@" > "$cache_file"
                    source "$cache_file"
                else
                    echo "eval-cache: command not found: $1"
                fi 1>&2
            fi
        } #}}}
# Functions }}}

# General Settings {{{
    umask 022
    ulimit -c 0

    # set path {{{
        export PATH="$( sort-path "$PATH" )"
        if whereis manpath > /dev/null 2>&1 ; then
            export MANPATH=$( unique-path "$HOME/local/share/man:$(manpath)" )
        else
            export MANPATH=$( unique-path "$HOME/local/share/man:$MANPATH" )
        fi > /dev/null 2>&1
    #}}}

    # set terminal type {{{
        if [[ "$COLORTERM" == "gnome-terminal" ]]; then
            if [[ "$TERM" == "xterm" ]]; then
                export TERM="xterm-256color"
            fi
        fi
    #}}}

    # set colors: man {{{
        if [[ "$TERM" =~ -256color(-.*)? ]]; then
            set-less-256colors
        else
            set-less-16colors
        fi
    #}}}

    # locale UTF-8 {{{
        export LANG=$( LC_CTYPE=C locale -a | grep -i 'en_US\.utf-*8' )
        export LC_CTYPE="$LANG"

        # workaround for problems in ls, sort and etc.
        export LC_COLLATE=C
    #}}}

    # default programs {{{
        export VISUAL=vim
        export EDITOR=$VISUAL
    #}}}

    # command aliases {{{
        alias rm='rm -i'
        alias mv='mv -i'
        alias cp='cp -i'
        alias grep='grep --color=auto'
        alias fgrep='fgrep --color=auto'
        alias vi='vim'
        alias ag='ag --page "less -Ri"'
        alias list='ls -al'
    # }}}
# General Settings }}}

# OS Specific Settings {{{
    case "$(uname -s)" in
        Darwin )
            alias ls='ls -vGpb'
            if check-runnable "gls"; then
                # http://geoff.greer.fm/lscolors/
                export LSCOLORS="exfxcxdxbxaGagaBabacaf"
                alias ls='gls --quoting-style=shell-escape --color=auto'
            fi

            # brew-cask
            export HOMEBREW_CASK_OPTS='--appdir=/Applications'

            # arm64
            if [ -x "/opt/homebrew/bin/brew" ]; then
                eval-cache /opt/homebrew/bin/brew shellenv
            fi
            ;;

        Linux )
            # http://geoff.greer.fm/lscolors/
            export LSCOLORS="di=34;40:ln=35;40:so=32;40:pi=33;40:ex=31;40:bd=0;1;46:cd=0;46:su=0;1;41:sg=0;41:tw=0;42:ow=0;45:"
            alias ls='ls --quoting-style=shell-escape --color=auto'

            # https://docs.brew.sh/Homebrew-on-Linux
            if [ -x "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
                eval-cache /home/linuxbrew/.linuxbrew/bin/brew shellenv
            elif [ -x "$HOME/.linuxbrew/bin/brew" ]; then
                eval-cache "$HOME/.linuxbrew/bin/brew" shellenv
            fi
            ;;
    esac
    export PATH="$( sort-path "$PATH" )"
    export MANPATH="$( unique-path "$MANPATH" )"
    export INFOPATH="$( unique-path "$INFOPATH" )"
# OS Specific Settings }}}

# Shell Specific Settings {{{
    case "$( detect-shell )" in
        bash )
            export _SH_SOURCE="$BASH_SOURCE"
            set -o ignoreeof    # ignore EOF (Ctrl+D)
            FZF_SCRIPT="$HOME/.fzf.bash"
            ;;

        zsh  )
            export _SH_SOURCE="${(%):-%N}"
            setopt IGNORE_EOF   # ignore EOF (Ctrl+D)
            FZF_SCRIPT="$HOME/.fzf.zsh"
            ;;
    esac
    [ -f "${FZF_SCRIPT}" ] && source "${FZF_SCRIPT}"
    export FZF_DEFAULT_COMMAND='fd -tf'
    function _fzf_compgen_path { fd -I -H -L -E.git . "$1"; }
    function _fzf_compgen_dir { fd -I -H -td -L -E.git -d1 . "$1"; }
    if check-runnable "fasd"; then
        eval-cache fasd --init auto
        unalias z zz sd sf
        function z() {
            local dir
            dir="$( fasd -Rdl "$1" | fzf -1 -0 --no-sort +m )" && cd "${dir}" || return 1
        }
    fi
# Shell Specific Settings }}}

# Additonal Settings {{{
    load-more-rc-files "$( basename $_SH_SOURCE )" "$@"

    function _shrc-nvm-init {
        local brew_dir="$( brew --prefix )"
        [ -s "$brew_dir/opt/nvm/nvm.sh" ] && \. "$brew_dir/opt/nvm/nvm.sh"  # This loads nvm
        [ -s "$brew_dir/opt/nvm/etc/bash_completion.d/nvm" ] && \. "$brew_dir/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
        unset -f "$0"
    }
    lazy-load _shrc-nvm-init nvm node npm truffle gulp yarn
# Additonal Settings }}}

